// Code generated by hertz generator.

package relation

import (
	"context"

	relation "tiktok_demo/biz/model/social/relation"
    relation_service "tiktok_demo/biz/service/social/relation"
	"tiktok_demo/pkg/utils"

	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
)

// RelationAction .
// @router /douyin/relation/action/ [POST]
func RelationAction(ctx context.Context, c *app.RequestContext) {
	var err error
	var req relation.RelationActionRequest
	err = c.BindAndValidate(&req)
	if err != nil {
        resp := utils.BuildBaseResp(err)
		c.JSON(consts.StatusOK, relation.RelationActionResponse{
            StatusCode: resp.StatusCode,
            StatusMsg: resp.StatusMsg,
        })
		return
	}

    _, err = relation_service.NewRelationService(ctx, c).FollowAction(&req)
    resp := utils.BuildBaseResp(err)
	c.JSON(consts.StatusOK, relation.RelationActionResponse{
        StatusCode: resp.StatusCode,
        StatusMsg: resp.StatusMsg,
    })
}

// RelationFollowList .
// @router /douyin/relation/follow/list/ [GET]
func RelationFollowList(ctx context.Context, c *app.RequestContext) {
	var err error
	var req relation.RelationFollowListRequest
	err = c.BindAndValidate(&req)
	if err != nil {
        resp := utils.BuildBaseResp(err)
        c.JSON(consts.StatusOK, relation.RelationFollowListResponse{
            StatusCode: resp.StatusCode,
            StatusMsg: resp.StatusMsg,
            UserList: nil,
        })
		return
	}

    FollowInfo, err := relation_service.NewRelationService(ctx, c).GetFollowList(&req)
	resp := utils.BuildBaseResp(err)
	c.JSON(consts.StatusOK, relation.RelationFollowListResponse{
        StatusCode: resp.StatusCode,
        StatusMsg: resp.StatusMsg,
        UserList: FollowInfo,
    })
}

// RelationFollowerList .
// @router /douyin/relation/follower/list/ [GET]
func RelationFollowerList(ctx context.Context, c *app.RequestContext) {
	var err error
	var req relation.RelationFollowerListRequest
	err = c.BindAndValidate(&req)
	if err != nil {
        resp := utils.BuildBaseResp(err)
        c.JSON(consts.StatusOK, relation.RelationFollowerListResponse{
            StatusCode: resp.StatusCode,
            StatusMsg: resp.StatusMsg,
            UserList: nil,
        })
		return
	}

    followerList, err := relation_service.NewRelationService(ctx, c).GetFollowerList(&req)
	resp := utils.BuildBaseResp(err)
	c.JSON(consts.StatusOK, relation.RelationFollowerListResponse{
        StatusCode: resp.StatusCode,
        StatusMsg: resp.StatusMsg,
        UserList: followerList,
    })
}

// RelationFriendList .
// @router /douyin/relation/friend/list/ [GET]
func RelationFriendList(ctx context.Context, c *app.RequestContext) {
	var err error
	var req relation.RelationFriendListRequest
	err = c.BindAndValidate(&req)
	if err != nil {
        resp := utils.BuildBaseResp(err)
        c.JSON(consts.StatusOK, relation.RelationFriendListResponse{
            StatusCode: resp.StatusCode,
            StatusMsg: resp.StatusMsg,
            UserList: nil,
        })
		return
	}

    friendList, err:= relation_service.NewRelationService(ctx, c).GetFriendList(&req)
	resp := utils.BuildBaseResp(err)
	c.JSON(consts.StatusOK, relation.RelationFriendListResponse{
        StatusCode: resp.StatusCode,
        StatusMsg: resp.StatusMsg,
        UserList: friendList,
    })
}
